// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/posthog/posthog-go (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	posthog "github.com/posthog/posthog-go"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Enqueue mocks base method.
func (m *MockClient) Enqueue(arg0 posthog.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockClientMockRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockClient)(nil).Enqueue), arg0)
}

// GetAllFlags mocks base method.
func (m *MockClient) GetAllFlags(arg0 posthog.FeatureFlagPayloadNoKey) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFlags", arg0)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFlags indicates an expected call of GetAllFlags.
func (mr *MockClientMockRecorder) GetAllFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFlags", reflect.TypeOf((*MockClient)(nil).GetAllFlags), arg0)
}

// GetFeatureFlag mocks base method.
func (m *MockClient) GetFeatureFlag(arg0 posthog.FeatureFlagPayload) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureFlag", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureFlag indicates an expected call of GetFeatureFlag.
func (mr *MockClientMockRecorder) GetFeatureFlag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureFlag", reflect.TypeOf((*MockClient)(nil).GetFeatureFlag), arg0)
}

// GetFeatureFlags mocks base method.
func (m *MockClient) GetFeatureFlags() ([]posthog.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureFlags")
	ret0, _ := ret[0].([]posthog.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureFlags indicates an expected call of GetFeatureFlags.
func (mr *MockClientMockRecorder) GetFeatureFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureFlags", reflect.TypeOf((*MockClient)(nil).GetFeatureFlags))
}

// IsFeatureEnabled mocks base method.
func (m *MockClient) IsFeatureEnabled(arg0 posthog.FeatureFlagPayload) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFeatureEnabled", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFeatureEnabled indicates an expected call of IsFeatureEnabled.
func (mr *MockClientMockRecorder) IsFeatureEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFeatureEnabled", reflect.TypeOf((*MockClient)(nil).IsFeatureEnabled), arg0)
}

// ReloadFeatureFlags mocks base method.
func (m *MockClient) ReloadFeatureFlags() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadFeatureFlags")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadFeatureFlags indicates an expected call of ReloadFeatureFlags.
func (mr *MockClientMockRecorder) ReloadFeatureFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadFeatureFlags", reflect.TypeOf((*MockClient)(nil).ReloadFeatureFlags))
}
